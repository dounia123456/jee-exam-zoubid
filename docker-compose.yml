version: "3"
networks:
  j2e-project-network:
    driver: bridge

#  j2e-project-network:
#    driver : bridge
#    external:
#      name: j2e-project-network
#      external:true
services:
  #  kafka-zookeper:
  #    image: confluentinc/cp-zookeeper
  #    ports:
  #      - "8089:8089"
  #  kafka-broker:
  #    image:  confluentinc/cp-kafka
  #    depends_on:
  #      - kafka-zookeper

  discovery-service:
    container_name: discovery-service
    #    depends_on:
    #      - kafka-broker
    networks:
      - j2e-project-network
    image: "discovery-service"
    ports:
      - "8761:8761"
    build:
      context: "./discovery-service/"
      dockerfile: "DockerFile"

  config-service:
    container_name: config-service
    networks:
      - j2e-project-network
    depends_on:
      - discovery-service
    image: "config-service"
    ports:
      - "8088:8088"
    build:
      context: "./config-server-demo/"
      dockerfile: "DockerFile"
    environment:
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761

  gateway-service:
    container_name: gateway-service
    networks:
      - j2e-project-network
    depends_on:
      - config-service
      - discovery-service
    image: "gateway-service"
    ports:
      - "8888:8888"
    build:
      context: "./gateway-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER = config-service
      - CONFIG_PORT = 8088
      - EUREKA_SERVER = discovery-service
      - EUREKA_PORT = 8761

  customer-service:
    container_name: customer-service
    networks:
      - j2e-project-network
    depends_on:
      - gateway-service
      - discovery-service
    image: "customer-service"
    ports:
      - "8081:8081"
    build:
      context: "./customer-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER=config-service
      - CONFIG_PORT=8088
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761

  inventory-service:
    container_name: inventory-service
    networks:
      - j2e-project-network
    depends_on:
      - gateway-service
      - discovery-service
    image: "inventory-service"
    ports:
      - "8082:8082"
    build:
      context: "./inventory-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER=config-service
      - CONFIG_PORT=8088
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761

  billing-supplier-service:
    container_name: billing-supplier-service
    networks:
      - j2e-project-network
    image: "billing-supplier-service"
    ports:
      - "8086:8086"
    build:
      context: "./billing-supplier-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER=config-service
      - CONFIG_PORT=8088
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761

  billing-service:
    container_name: billing-service
    networks:
      - j2e-project-network
    depends_on:
      - gateway-service
      - discovery-service
      - inventory-service
      - customer-service
      - billing-supplier-service
    image: "billing-service"
    ports:
      - "8083:8083"
    build:
      context: "./billing-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER=config-service
      - CONFIG_PORT=8088
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761

  data-analytics-service:
    container_name: data-analytics-service
    networks:
      - j2e-project-network
    depends_on:
      - gateway-service
      - discovery-service
      - billing-supplier-service
    image: "data-analytics-service"
    ports:
      - "8084:8084"
    build:
      context: "./data-analytics-service/"
      dockerfile: "DockerFile"
    environment:
      - CONFIG_SERVER=config-service
      - CONFIG_PORT=8088
      - EUREKA_SERVER=discovery-service
      - EUREKA_PORT=8761
#  mysql-standalone:
#    image: 'mysql:5.7'
#    environment:
#      - MYSQL_ROOT_PASSWORD=root
#      - MYSQL_PASSWORD=root
#      - MYSQL_DATABASE=demo
#    ports:
#      - "3307:3306"
#  springboot-docker-container:
#    image: springboot-docker-container
#    ports:
#      - "8082:8082"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-standalone:3306/demo?autoReconnect=true&useSSL=false
#      SPRING_DATASOURCE_USERNAME: "root"
#      SPRING_DATASOURCE_PASSWORD: "root"
#    build:
#      context: "./"
#      dockerfile: "DockerFile"
#    depends_on:
#      - mysql-standalone

